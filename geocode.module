<?php

define('GEOCODE_DUMMY_WKT', 'POINT(0, 0)');

/**
 * The Geocode API call.
 * @example:
 *    geocode('google','4925 Gair Ave, Terrace, BC');
 *    geocode('google','New York City','polygon');
 */
function geocode() {
  ctools_include('plugins');

  $args = func_get_args();
  $processor_name = array_shift($args);
  $processor = ctools_get_plugins('geocode', 'geocode_handler', $processor_name);
  $geometry = call_user_func_array($processor['callback'],$args);

  return $geometry;
}

/**
 * Return a list of all handlers that might geocode something for you.
 */
function geocode_handler_info($field_type = NULL) {
  ctools_include('plugins');

  static $handlers;
  if (!$handlers) {
    $handlers = ctools_get_plugins('geocode', 'geocode_handler');
  }
  if ($field_type) {
    $field_handlers = $handlers;
    foreach($field_handlers as $i => $handler) {
      if (!isset($handler['field_types']) || !in_array($field_type, $handler['field_types'])) {
        unset($field_handlers[$i]);
      }
    }
    return $field_handlers;
  }
  return $handlers;
}

function geocode_get_handler($handler_name) {
  $handlers = geocode_handler_info();
  return $handlers[$handler_name];
}

function geocode_supported_field_types() {
  $supported = array();

  $processors = geocode_handler_info();

  foreach ($processors as $processor) {
    if (isset($processor['field_types'])) {
      foreach ($processor['field_types'] as $field_type) {
        $supported[$field_type][] = $processor['name'];
      }
    }
  }

	return $supported;
}

function geocode_load_geophp() {
  static $static_cache = FALSE;

  if (!$static_cache) {
    $path = libraries_get_path('geoPHP');
    $file = $path.'/geoPHP.inc';
    if (file_exists($file)) {
      if (include_once($file)) {
        $static_cache = $file;
      }
    }
  }

  return $static_cache;
}


/**
 * Implementation of hook_ctools_plugin_api().
 */
function geocode_ctools_plugin_api() {
  return array('version' => 1);
}

/**
 * Implementation of hook_ctools_plugin_dierctory() to let the system know
 * we implement plugins.
 */
function geocode_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_ctools_plugin_type
 */
function geocode_ctools_plugin_type() {
  return array(
    'geocode_handler' => array(),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function geocode_field_widget_info() {
  return array(
    'geocode' => array(
      'label' => t('Geocode from another field'),
      'field types' => array('geofield'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      )
    ),
  );
}

/**
 * Implements field_widget_settings_form().
 */
function geocode_field_widget_settings_form($this_field, $instance) {
  $settings = $instance['widget']['settings'];

  $entity_fields = field_info_instances($instance['entity_type'], $instance['bundle']);
  $all_fields = field_info_fields();
  $supported_field_types = geocode_supported_field_types();
  $processors = geocode_handler_info();
  $handlers_by_type = array();
  $field_types = array();
  $valid_fields = array();
  $available_handlers = array();

  // Add in the title/name
  switch ($instance['entity_type']) {
    case 'node':
      $all_fields['title'] = array(
        'field_name' => 'title',
        'type' => 'text',
      );

      $entity_fields['title']['label'] = t('Title');
      break;

    case 'taxonomy_term':
      $all_fields['name'] = array(
        'field_name' => 'name',
        'type' => 'text',
      );

      $entity_fields['name']['label'] = t('Name');
      break;
  }


  // Get a list of all valid fields that we both support and are part of this entity
  foreach ($all_fields as $field) {
    if (array_key_exists($field['field_name'], $entity_fields)) {
      if (in_array($field['type'], array_keys($supported_field_types)) && ($field['field_name'] != $this_field['field_name'])) {
        $valid_fields[$field['field_name']] = $entity_fields[$field['field_name']]['label'];
        foreach ($supported_field_types[$field['type']] as $handler) {
          $available_handlers[$handler] = $processors[$handler]['title'];
          $handlers_by_type[$field['type']][] = $handler;
          $field_types[$field['field_name']] = $field['type'];
        }
      }
    }
  }

  $form['geocode_field'] = array(
    '#type' => 'select',
    '#title' => t('Geocode from field'),
    '#default_value' => isset($settings['geocode_field']) ? $settings['geocode_field']: '',
    '#options' => $valid_fields,
    '#description' => t('Select which field you would like to geocode from.'),
    '#required' => TRUE,
    '#attributes' => array('onchange' => 'geocode_admin_handler_filter();'),
  );

  $form['geocode_handler'] = array(
    '#type' => 'select',
    '#title' => t('Geocoder'),
    '#prefix' => '<div id="geocode-handler-div">',
    '#suffix' => '</div>',
    '#default_value' => isset($settings['geocode_handler']) ? $settings['geocode_handler']: '',
    '#options' => $available_handlers,
    '#description' => t('Select which type of geocoding handler you would like to use'),
    '#required' => TRUE,
  );

  drupal_add_js(array('geocode_widget_settings' => array('handlers' => $handlers_by_type, 'types' => $field_types)),'setting');
  drupal_add_js(drupal_get_path('module','geocode').'/geocode.admin.js','file');

  return $form;
}

function geocode_field_widget_settings_form_callback($form, $form_state) {
  return $form['geocode_handler'];
}

/**
 * Implements hook_field_widget_form().
 */
function geocode_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  // Add oru own validation callback
  if (isset($element['#element_validate'])) {
    $element['#element_validate'][] = 'geocode_widget_validate';
  }
  else {
    $element['#element_validate'] = array('geocode_widget_validate');
  }
  // Store the current values of the fields as en element property.
  $element['#geocode_previous_values'] = $items;
  return $element;
}

/**
 * Validation callback for the geocode_field_widget_form form.
 *
 * We cannot geocode the field's value here since others fields have not been
 * validated (or even processed) yet.
 *
 */
function geocode_widget_validate($element, &$form_state) {
  // Get previously set value (or dummy).
  $values = !empty($element['#geocode_previous_values']) ? $element['#geocode_previous_values'] : array(array('wkt' => GEOCODE_DUMMY_WKT));
  // Flag this field value for geocoding (in geocode_field_attach_presave).
  foreach($values as &$value) {
    $value['geocode'] = TRUE;
  }
  // Set the form value
  form_set_value($element, $values, $form_state);
}

/**
 * Implements hook_field_attach_submit().
 *
 * Process fields using our geocode widget.
 */
function geocode_field_attach_submit($entity_type, $entity, $form, &$form_state) {
  // Loop over any geofield using our geocode widget
  $entity_info = entity_get_info($entity_type);
  $bundle_name = empty($entity_info['entity keys']['bundle']) ? $entity_type : $entity->{$entity_info['entity keys']['bundle']};
  foreach(field_info_instances($entity_type, $bundle_name) as $field_instance) {
    if ($field_instance['widget']['type'] === 'geocode') {
      // Required settings
      if (isset($field_instance['widget']['settings']['geocode_handler']) && isset($field_instance['widget']['settings']['geocode_field'])) {
        $handler = geocode_get_handler($field_instance['widget']['settings']['geocode_handler']);
        $field_name = $field_instance['widget']['settings']['geocode_field'];
        $field_info = field_info_field($field_name);
        // Get values from the geocoded field
        $langcode = field_language($entity_type, $entity, $field_name);
        $items = field_get_items($entity_type, $entity, $field_name, $langcode);
        if ($items) {
          $values = field_get_items($entity_type, $entity, $field_instance['field_name'], $langcode);
          if ($values === FALSE) {
            $values = array();
          }
          foreach($items as $delta => $item) {
            // Process any item marked for geocoding (by our widget)
            if (!empty($values[$delta]['geocode'])) {
              try {
                $geometry = call_user_func($handler['field_callback'], $field_info, $item);
              }
              catch(Exception $e) {
                drupal_set_message($e->getMessage(),'error');
              }
              $values[$delta] = ($geometry instanceof Geometry )? geofield_get_values_from_geometry($geometry) : NULL;
            }
          }
          // Filter out any exisitng geofield value without a value in the source field
          $entity->{$field_instance['field_name']}[$langcode] = array_intersect_key($values, $items);
        }
      }
    }
  }
}